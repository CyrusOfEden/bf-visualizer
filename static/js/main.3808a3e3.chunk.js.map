{"version":3,"sources":["theme.ts","services/brainfuckExecutor.ts","components/CodeCell.tsx","components/CodeGrid.tsx","components/CodeForm.tsx","pages/Visualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","buttons","primary","userSelect","cursor","backgroundColor","outline","theme","deepmerge","preset","createTheme","emptyInitialExecutionState","input","script","emptyExecutionState","id","done","instruction_pointer","data_pointer","output","data","interpreter","axios","create","baseURL","validateStatus","statusCode","processResponse","status","Promise","resolve","reject","a","post","state","useExecutor","initialState","useState","isLoading","setLoading","error","setError","setExecutionState","setScript","setState","newState","nextStep","useCallback","step","then","useEffect","trim","execute","CodeCell","element","isActive","activeColor","style","sx","fontSize","py","fontFamily","textAlign","color","CodeGrid","maxRows","array","columns","setColumns","ref","React","createRef","rowIndex","Math","floor","columnIndex","current","scrollToItem","GridCell","index","disableHeight","width","rows","ceil","length","rowCount","columnCount","rowHeight","columnWidth","height","min","Textarea","props","minRows","resize","boxSizing","fontSizes","lineHeight","padding","space","fonts","monospace","border","borderRadius","CodeForm","onSubmit","setInput","setValue","setter","event","target","value","preventDefault","my","htmlFor","mb","name","onChange","placeholder","type","bg","Visualizer","isPlaying","setPlaying","mt","p","message","fontWeight","onClick","mr","disabled","App","useMemo","as","pt","px","pb","mx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3808a3e3.chunk.js","sourcesContent":["import preset from \"@rebass/preset-material\"\nimport deepmerge from \"deepmerge\"\n\n// Solarized\nconst base03 = \"#002b36\"\nconst base02 = \"#073642\"\nconst base01 = \"#586e75\"\nconst base00 = \"#657b83\"\nconst base0 = \"#839496\"\nconst base1 = \"#93a1a1\"\nconst base2 = \"#eee8d5\"\nconst base3 = \"#fdf6e3\"\nconst yellow = \"#b58900\"\nconst orange = \"#cb4b16\"\nconst red = \"#dc322f\"\nconst magenta = \"#d33682\"\nconst violet = \"#6c71c4\"\nconst blue = \"#268bd2\"\nconst cyan = \"#2aa198\"\nconst green = \"#859900\"\n\nconst colors = {\n  base03,\n  base02,\n  base01,\n  base00,\n  base0,\n  base1,\n  base2,\n  base3,\n  yellow,\n  orange,\n  red,\n  magenta,\n  violet,\n  blue,\n  cyan,\n  green,\n}\n\nconst buttons = {\n  primary: {\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    backgroundColor: base00,\n    \"&:hover\": {\n      backgroundColor: base02,\n    },\n    \"&:active\": {\n      backgroundColor: base00,\n    },\n    \"&:focus\": {\n      outline: 0,\n    },\n    \"&:disabled\": {\n      cursor: \"not-allowed\",\n      backgroundColor: \"base1\"\n    },\n  },\n}\n\nexport const theme = deepmerge(preset, {\n  colors,\n  buttons,\n})\n\nexport const createTheme = () => theme\n","import { useState, useEffect, useCallback } from \"react\"\nimport axios from \"axios\"\n\nexport type InitialExecutionState = {\n  input: string\n  script: string\n}\n\nconst emptyInitialExecutionState = {\n  input: \"\",\n  script: \"\",\n}\n\nexport type ExecutionState = {\n  id: string\n  done: boolean\n  instruction_pointer: number\n  data_pointer: number\n  input: string\n  output: string\n  script: Array<string>\n  data: Array<number>\n}\n\nexport type ExecutionError = {\n  error: string,\n  message: string\n}\n\nconst emptyExecutionState = {\n  id: \"\",\n  done: false,\n  instruction_pointer: 0,\n  data_pointer: 0,\n  input: \"\",\n  output: \"\",\n  script: [],\n  data: [],\n}\n\nconst interpreter = axios.create({\n  baseURL: \"https://sec.meetkaruna.com/api/v1/brainfuck\",\n  validateStatus: statusCode => statusCode < 500\n})\n\nconst processResponse = ({ status, data }) =>\n  (status >= 200 && status <= 300) ? Promise.resolve(data) : Promise.reject(data)\n\nexport async function execute(\n  script: InitialExecutionState,\n): Promise<ExecutionState> {\n  return processResponse(await interpreter.post(\"\", script))\n}\n\nexport async function step(state: ExecutionState): Promise<ExecutionState> {\n  const { id } = state\n  return processResponse(await interpreter.post(`/${id}/step`))\n}\n\nexport function useExecutor(initialState = emptyInitialExecutionState) {\n  const [isLoading, setLoading] = useState<boolean | null>(null)\n  const [error, setError] = useState<ExecutionError | null>(null)\n  const [state, setExecutionState] = useState<ExecutionState>(\n    emptyExecutionState,\n  )\n  const [script, setScript] = useState(initialState)\n\n  const setState = (newState: ExecutionState) => {\n    setError(null)\n    setExecutionState(newState)\n    setLoading(false)\n  }\n\n  const firstStep = () => {\n    if (script.script.trim()) {\n      setLoading(true)\n      execute(script).then(setState, setError)\n    }\n  }\n\n  // useCallback to serialize the execution of multiple calls\n  const nextStep = useCallback(() => {\n    setLoading(true)\n    return step(state).then(setState, setError)\n  }, [state])\n\n  useEffect(firstStep, [script])\n\n  return { setScript, isLoading, error, nextStep, state }\n}\n","import React from \"react\"\nimport { Text } from \"rebass\"\n\nexport type CodeCellElement = string | number\n\ntype CodeCellProps = {\n  element: CodeCellElement\n  isActive: boolean\n  activeColor: string\n  style?: { [key: string]: string }\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({\n  element,\n  isActive,\n  activeColor,\n  style,\n}) => {\n  return (\n    <Text\n      sx={{\n        fontSize: 2,\n        py: 3,\n        fontFamily: \"monospace\",\n        textAlign: \"center\",\n        color: isActive ? \"white\" : \"base00\",\n        backgroundColor: isActive ? activeColor : \"base3\",\n      }}\n      style={style}\n    >\n      {element}\n    </Text>\n  )\n}\n\nexport default CodeCell\n","import React, { useState, useEffect } from \"react\"\nimport { FixedSizeGrid as Grid } from \"react-window\"\nimport AutoSizer from \"react-virtualized-auto-sizer\"\n\nimport CodeCell, { CodeCellElement } from \"./CodeCell\"\n\n// Sufficient to display 8-bit numbers\nconst CELL_HEIGHT = 48\nconst CELL_WIDTH = 50\n\ntype CodeGridProps = {\n  cursor: number\n  activeColor: string\n  array: Array<CodeCellElement>\n  maxRows: number\n}\n\nconst CodeGrid: React.FC<CodeGridProps> = ({ maxRows, array, cursor, activeColor }) => {\n  const [columns, setColumns] = useState(8)\n  const ref = React.createRef<Grid>()\n\n  useEffect(() => {\n    const rowIndex = Math.floor(cursor / columns)\n    const columnIndex = cursor - rowIndex * columns\n    ref.current && ref.current.scrollToItem({ rowIndex, columnIndex })\n  }, [ref, cursor, columns])\n\n  const GridCell = ({ rowIndex, columnIndex, style }) => {\n    const index = rowIndex * columns + columnIndex\n    return (\n      <CodeCell\n        element={array[index]}\n        isActive={index === cursor}\n        activeColor={activeColor}\n        style={style}\n      />\n    )\n  }\n\n  return (\n    <AutoSizer disableHeight>\n      {({ width }) => {\n        setColumns(Math.floor(width / CELL_WIDTH))\n        const rows = Math.ceil(array.length / columns)\n        return (\n          <Grid\n            ref={ref}\n            rowCount={rows}\n            columnCount={columns}\n            rowHeight={CELL_HEIGHT}\n            columnWidth={CELL_WIDTH}\n            height={Math.min(rows, maxRows) * CELL_HEIGHT}\n            width={width}\n          >\n            {GridCell}\n          </Grid>\n        )\n      }}\n    </AutoSizer>\n  )\n}\n\nexport default CodeGrid\n","import React, { useState, useEffect } from \"react\"\n\nimport { Button, Box } from \"rebass\"\nimport { Label } from \"@rebass/forms\"\nimport AutosizeTextarea from \"react-textarea-autosize\"\nimport { InitialExecutionState } from \"services/brainfuckExecutor\"\n\nimport { theme } from \"theme\"\n\nconst helloWorld =\n  \"# Hello World\\n++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\"\n\nconst Textarea: React.FC<any> = props => (\n  <AutosizeTextarea\n    id=\"script\"\n    minRows={1}\n    maxRows={12}\n    style={{\n      resize: \"none\",\n      width: \"100%\",\n      boxSizing: \"border-box\",\n      // @ts-ignore\n      fontSize: theme.fontSizes[2],\n      lineHeight: 1.5,\n      // @ts-ignore\n      padding: theme.space[3],\n      // @ts-ignore\n      fontFamily: theme.fonts.monospace,\n      outline: 0,\n      border: 0,\n      color: theme.colors.base02,\n      backgroundColor: theme.colors.base2,\n      borderRadius: \"0.2rem\",\n    }}\n    {...props}\n  />\n)\n\ntype CodeFormProps = {\n  onSubmit: (values: InitialExecutionState) => void\n}\n\nconst CodeForm: React.FC<CodeFormProps> = ({ onSubmit }) => {\n  const [script, setScript] = useState<string>(helloWorld)\n  const [input, setInput] = useState<string>(\"\")\n\n  useEffect(() => {\n    onSubmit({ script, input })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    onSubmit({ script, input })\n  }\n\n  const setValue = setter => event => {\n    setter(event.target.value)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box sx={{ my: 3 }}>\n        <Label htmlFor=\"script\" sx={{ mb: 2, color: \"base1\" }}>\n          Source\n        </Label>\n        <Textarea\n          name=\"script\"\n          value={script}\n          onChange={setValue(setScript)}\n          placeholder=\"Enter your Brianfuck script here...\"\n        />\n      </Box>\n      <Box sx={{ my: 3 }}>\n        <Label htmlFor=\"input\" sx={{ mb: 2, color: \"base1\" }}>\n          Input\n        </Label>\n        <Textarea\n          name=\"input\"\n          value={input}\n          onChange={setValue(setInput)}\n          placeholder=\"STDIN (optional)\"\n        />\n      </Box>\n      <Button type=\"submit\" sx={{ bg: \"violet\" }}>\n        Reload Visualizer\n      </Button>\n    </form>\n  )\n}\n\nexport default CodeForm\n","import React, { useState, useEffect } from \"react\"\n\nimport { useExecutor } from \"services/brainfuckExecutor\"\n\nimport { Text, Heading, Box, Button } from \"rebass\"\n\nimport CodeGrid from \"components/CodeGrid\"\nimport CodeForm from \"components/CodeForm\"\n\nconst Visualizer: React.FC = () => {\n  const { setScript, isLoading, error, nextStep, state } = useExecutor()\n  const [isPlaying, setPlaying] = useState(false)\n\n  useEffect(() => {\n    if (isPlaying) {\n      nextStep()\n    }\n  }, [isPlaying, nextStep, state])\n\n  const { data, data_pointer } = state\n  const { script, instruction_pointer } = state\n\n  return (\n    <Box sx={{ color: \"base01\" }}>\n      <Box>\n        <Heading>Brainfuck Execution Visualizer</Heading>\n        <CodeForm onSubmit={setScript} />\n      </Box>\n      {isLoading == null || (\n        <Box sx={{ mt: 5 }}>\n          {error && (\n            <Box sx={{ p: 3, color: \"white\", bg: \"red\" }}>\n              <Text>\n                {error.error} — {error.message}\n              </Text>\n            </Box>\n          )}\n\n          <Box sx={{ my: 3 }}>\n            <Heading>Data</Heading>\n            <Box sx={{ my: 2 }}>\n              <CodeGrid\n                maxRows={3}\n                activeColor=\"magenta\"\n                array={data}\n                cursor={data_pointer}\n              />\n            </Box>\n          </Box>\n          <Box sx={{ my: 3 }}>\n            <Heading>Script</Heading>\n            <Box sx={{ my: 2 }}>\n              <CodeGrid\n                maxRows={6}\n                activeColor=\"cyan\"\n                array={script}\n                cursor={instruction_pointer}\n              />\n            </Box>\n          </Box>\n          {state.done && state.output && (\n            <Box sx={{ mt: 3, my: 4 }}>\n              <Heading sx={{ mb: 2 }}>Output</Heading>\n              <Text sx={{ color: \"base02\", fontWeight: \"bold\" }}>\n                {state.output}\n              </Text>\n            </Box>\n          )}\n          <Box>\n            <Button\n              onClick={nextStep}\n              sx={{ mr: 2, bg: \"cyan\" }}\n              disabled={isPlaying}\n            >\n              Step\n            </Button>\n            <Button\n              onClick={() => setPlaying(!isPlaying)}\n              sx={{ mr: 2, bg: \"magenta\" }}\n            >\n              {isPlaying ? \"Pause\" : \"Play\"}\n            </Button>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default Visualizer\n","import React from \"react\"\nimport { ThemeProvider } from \"emotion-theming\"\n\nimport { createTheme } from \"theme\"\n\nimport { Box } from \"rebass\"\nimport Visualizer from \"pages/Visualizer\"\n\nconst App = () => {\n  const theme = React.useMemo(createTheme, [])\n\n  return (\n    <ThemeProvider<any> theme={theme as any}>\n      <Box\n        as=\"main\"\n        sx={{\n          width: \"100%\",\n          pt: [3, 5],\n          px: [3, 5],\n          pb: [6, 4],\n          mx: \"auto\",\n        }}\n      >\n        <Visualizer />\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nasync function registerValidSW(swUrl: string, config?: Config) {\n  let registration: ServiceWorkerRegistration\n  try {\n    registration = await navigator.serviceWorker.register(swUrl)\n  } catch (error) {\n    console.error(\"Error during service worker registration:\", error)\n    return\n  }\n  registration.onupdatefound = () => {\n    const installingWorker = registration.installing\n    if (installingWorker == null) {\n      return\n    }\n    installingWorker.onstatechange = () => {\n      if (installingWorker.state === \"installed\") {\n        if (navigator.serviceWorker.controller) {\n          // At this point, the updated precached content has been fetched,\n          // but the previous service worker will still serve the older\n          // content until all client tabs are closed.\n          console.log(\n            \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n          )\n\n          // Execute callback\n          if (config && config.onUpdate) {\n            config.onUpdate(registration)\n          }\n        } else {\n          // At this point, everything has been precached.\n          // It's the perfect time to display a\n          // \"Content is cached for offline use.\" message.\n          console.log(\"Content is cached for offline use.\")\n\n          // Execute callback\n          if (config && config.onSuccess) {\n            config.onSuccess(registration)\n          }\n        }\n      }\n    }\n  }\n  return registration\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  try {\n    const response = await fetch(swUrl)\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\")\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload()\n        })\n      })\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config)\n    }\n  } catch (error) {\n    console.log(\"No internet connection found. App is running in offline mode.\")\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}